{"version":3,"sources":["CoffeeList.js","Toast.js","Admin.js","App.js","serviceWorker.js","index.js"],"names":["CoffeeList","React","Component","readData","self","this","axios","get","window","global","api_location","then","response","console","log","data","setState","products","catch","error","getProducts","table","i","state","length","push","createElement","key","name","price","sku","constructor","props","super","bind","render","style","marginBottom","Table","Toaster","show","hide","componentDidUpdate","prevProps","Toast","onClose","delay","autohide","Header","className","Body","message","Admin","validated","id","buttonDisabled","toastShow","toastText","changeHandler","handleSubmit","event","preventDefault","currentTarget","checkValidity","stopPropagation","FormData","append","file","post","files_location","_boundary","res","status","statusText","target","value","files","Container","Form","noValidate","onSubmit","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","required","width","onChange","Text","Feedback","Button","disabled","App","Router","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","inline","FormControl","variant","Switch","Route","path","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b7281cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport Table from 'react-bootstrap/Table'\r\nimport axios from 'axios';\r\n\r\nclass CoffeeList extends React.Component {\r\n\r\n    readData() {\r\n        const self = this;\r\n        axios.get(window.global.api_location+'/products').then(function(response) {\r\n            console.log(response.data);\r\n\r\n            self.setState({products: response.data});\r\n        }).catch(function (error){\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getProducts() {\r\n        let table = []\r\n\r\n        for (let i=0; i < this.state.products.length; i++) {\r\n\r\n            table.push(\r\n                <tr key={i}>\r\n                    <td>{this.state.products[i].name}</td>\r\n                    <td>{this.state.products[i].price}</td>\r\n                    <td>{this.state.products[i].sku}</td>\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return table\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.readData();\r\n        this.state = {products: []};\r\n\r\n        this.readData = this.readData.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 style={{marginBottom: \"40px\"}}>Menu</h1>\r\n                <Table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>\r\n                            Name\r\n                        </th>\r\n                        <th>\r\n                            Price\r\n                        </th>\r\n                        <th>\r\n                            SKU\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.getProducts()}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CoffeeList;","import React from 'react';\r\nimport Toast from 'react-bootstrap/Toast';\r\n\r\nclass Toaster extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {show: false};\r\n        this.hide = this.hide.bind(this);\r\n    }\r\n\r\n    hide(){\r\n        this.setState({show: false});\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props !== prevProps) {\r\n            this.setState({show: this.props.show});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Toast onClose={this.hide} show={this.state.show} delay={3000} autohide>\r\n                <Toast.Header>\r\n                    <strong className=\"mr-auto\">File Upload</strong>\r\n                </Toast.Header>\r\n                <Toast.Body>{this.props.message}</Toast.Body>\r\n            </Toast>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Toaster;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Toast from './Toast.js'\r\n\r\nimport axios from 'axios';\r\n\r\n/*\r\nThis is the react equivilent of the following HTML form\r\n<form action=\"http://localhost:8000\" method=\"post\" enctype=\"multipart/form-data\">\r\n  <p><input type=\"text\" name=\"id\" value=\"\">\r\n  <p><input type=\"file\" name=\"file\">\r\n  <p><button type=\"submit\">Submit</button>\r\n</form>\r\n*/\r\n\r\n\r\nclass Admin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {validated: false, id: \"\", buttonDisabled: false, toastShow: false, toastText: \"asd\"};\r\n\r\n        this.validated = this.validated.bind(this);\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    validated(){\r\n        console.log(\"validated\", this.state.validated)\r\n        return this.state.validated;\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        if(event.currentTarget.checkValidity() === false) {\r\n            event.stopPropagation();\r\n            return;\r\n        };\r\n\r\n        this.setState({buttonDisabled: true, toastShow: false})\r\n\r\n        // create the data\r\n        const data = new FormData()\r\n        data.append('file', this.state.file);\r\n        data.append('id', this.state.id);\r\n\r\n        // upload the file\r\n        axios.post(\r\n            window.global.files_location,\r\n            data,\r\n            {'content-type': `multipart/form-data; boundary=${data._boundary}`})\r\n            .then(res => {\r\n                console.log(res);\r\n                var toastText = \"\";\r\n                if(res.status === 200) {\r\n                    toastText = \"Uploaded file\";\r\n                } else {\r\n                    toastText = \"Unable to upload file. Error:\" +res.statusText;\r\n                }\r\n\r\n                this.setState({buttonDisabled: false, toastShow: true, toastText: toastText});\r\n            }).catch(error => {\r\n            console.log(\"Err\" + error);\r\n            this.setState({buttonDisabled: false, toastShow: true, toastText: \"Unable to upload file. \" + error});\r\n        });\r\n    }\r\n\r\n    changeHandler(event) {\r\n        if(event.target.name === \"file\"){\r\n            this.setState({ [event.target.name]: event.target.files[0], toastShow: false});\r\n            return\r\n        }\r\n\r\n        this.setState({ [event.target.name]: event.target.value, toastShow: false});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 style={{marginBottom: \"40px\"}}>Admin</h1>\r\n                <Container className=\"text-left\">\r\n                    <Form noValidate validated={this.validated} onSubmit={this.handleSubmit}>\r\n                        <Form.Group as={Row} controlId=\"productID\">\r\n                            <Form.Label column sm=\"2\">Product ID:</Form.Label>\r\n                            <Col sm=\"6\">\r\n                                <Form.Control type=\"text\" name=\"id\" placeholder=\"\" required style={{width: \"80px\"}} value={this.state.id} onChange={this.changeHandler}/>\r\n                                <Form.Text className=\"text-muted\">Enter the product id to upload an image for</Form.Text>\r\n                                <Form.Control.Feedback type=\"invalid\">Please provide a product ID.</Form.Control.Feedback>\r\n                            </Col>\r\n                            <Col sm=\"4\">\r\n                                <Toast show={this.state.toastShow} message={this.state.toastText}/>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label column sm=\"2\">File:</Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control type=\"file\" name=\"file\" placeholder=\"\" required onChange={this.changeHandler}/>\r\n                                <Form.Text className=\"text-muted\">Image to associate with the product</Form.Text>\r\n                                <Form.Control.Feedback type=\"invalid\">Please select a file to upload.</Form.Control.Feedback>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Button  type=\"submit\" disabled={this.state.buttonDisabled}>Submit form</Button>\r\n                    </Form>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Admin;","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './App.css';\r\n\r\nimport CoffeeList from './CoffeeList.js'\r\nimport Admin from './Admin.js'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"#home\">Coffee Shop</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"/\">Home</Nav.Link>\r\n                            <Nav.Link href=\"/admin\">Admin</Nav.Link>\r\n                        </Nav>\r\n                        <Form inline>\r\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                            <Button variant=\"outline-success\">Search</Button>\r\n                        </Form>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <Switch>\r\n                    <Route path=\"/admin\">\r\n                        <Admin/>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <CoffeeList/>\r\n                    </Route>\r\n                    <Route>\r\n                        <CoffeeList/>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}